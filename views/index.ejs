<!doctype html>
<html lang="en" class="no-js">
<head>
    <% include partials/template/head.ejs %>
</head>
<body id="home">
<% include partials/template/header.ejs %>
<div class="wrapper">

    <div class="main-panel">
        <div class="content">
            <% include partials/sections/index/index-header.ejs %>
            <div class="container-fluid">
                <% include partials/sections/index/index-blurb.ejs %>
                <% include partials/sections/index/index-cao.ejs %>
                <% include partials/sections/index/index-colleges.ejs %>
                <% include partials/sections/index/index-courses.ejs %>

            </div>
        </div>
    </div>
</div>
<% include partials/template/jsdefaults.ejs %>

<script>
    $('.counter').each(function() {
        var $this = $(this),
                countTo = $this.attr('data-count');

        $({ countNum: $this.text()}).animate({
                    countNum: countTo
                },

                {
                    duration: 8000,
                    easing:'linear',
                    step: function() {
                        $this.text(Math.floor(this.countNum));
                    },
                    complete: function() {
                        $this.text(this.countNum);
                    }

                });
    });



    var barChartData = {
        labels : [
            "600",
            "500-599",
            "400-499",
            "300-399",
            "200-299",
            "100-199",
            ">100",
        ],
        datasets : [
            {
                fillColor : "#8DB986",
                strokeColor : "#8DB986",
                highlightFill: "#ACCE91",
                highlightStroke: "#ACCE91",
                data : [215,5431,14097,14446,9768,6562,4526]
            }
        ],
        scaleGridLineColor : "#000",
        scaleOverride:true,
        scaleSteps:10,
        scaleStartValue:0,
        scaleStepWidth:1
    }
    var doughnutData = [
        {
            value: 12,
            color:'#99B898',
            label : 'Munster',
            labelColor : 'white',
            labelFontSize : '16'
        },
        {
            value : 4,
            color : '#2A363B',
            label : 'Connacht',
            labelColor : 'white',
            labelFontSize : '16'
        },
        {
            value : 1,
            color : '#CB4B16',
            label : "Ulster",
            labelColor : 'white',
            labelFontSize : '16'
        },
        {
            value : 31,
            color : "#FF847C",
            label : 'Leinster',
            labelColor : 'white',
            labelFontSize : '16'
        }
    ]
    var lineChartData =  {
        labels : ["a1","b1","c1"],
        datasets : [
            {
                fillColor : "#99B898",
                strokeColor : "#99B898",
                pointColor : "#99B898",
                pointStrokeColor : "#fff",
                data : [4.7, 10.2, 14.8]
            },

            {
                fillColor : "#2A363B",
                strokeColor : "#2A363B",
                pointColor : "#2A363B",
                pointStrokeColor : "#fff",
                data : [1.4, 6.3, 12.9]
            }
        ]
    }
    var doughnutOptions = {
        //Boolean - Whether we should show a stroke on each segment
        segmentShowStroke : true,

        //String - The colour of each segment stroke
        segmentStrokeColor : "#fff",

        //Number - The width of each segment stroke
        segmentStrokeWidth : 2,

        //The percentage of the chart that we cut out of the middle.
        percentageInnerCutout : 50,

        //Boolean - Whether we should animate the chart
        animation : true,

        //Number - Amount of animation steps
        animationSteps : 100,

        //String - Animation easing effect
        animationEasing : "easeOutBounce",

        //Boolean - Whether we animate the rotation of the Doughnut
        animateRotate : true,

        //Boolean - Whether we animate scaling the Doughnut from the centre
        animateScale : true,

        //Function - Will fire on animation completion.
        onAnimationComplete : null,

        "legend": {
            "data":  [{
                title: "Munster",
                color: "#3366CC"
            },
            {
                title: "Connacht",
                color: "#2A363B"
            },
            {
                title:"Ulster",
                color:"#CB4B16"
            },
            {
                title:"Leinster",
                color:"#FF847C"
            }





            ]
        }
    }
    var polarData = [
        {
            value: 215,
            color:"#F7464A",
            highlight: "#FF5A5E",
            label: "600"
        },
        {
            value: 5431,
            color: "#46BFBD",
            highlight: "#5AD3D1",
            label: "500-599"
        },
        {
            value: 14097,
            color: "#FDB45C",
            highlight: "#FFC870",
            label: "400-499"
        },
        {
            value: 14446,
            color: "#949FB1",
            highlight: "#A8B3C5",
            label: "300-399"
        },
        {
            value: 9768,
            color: "#4D5360",
            highlight: "#616774",
            label: "200-299"
        },
        {
            value: 6562,
            color: "#4D5360",
            highlight: "#616774",
            label: "100-199"
        },
        {
            value: 4526,
            color: "#4D5360",
            highlight: "#616774",
            label: "> 100"
        }

    ];

    // Doughnut Chart Data



    var ctx = document.getElementById("points").getContext("2d");
    window.myBar = new Chart(ctx).Bar(barChartData, {
        responsive : true
    });

    var ctx = document.getElementById("doughnutChart").getContext("2d");
    // Create the Doughnut Chart
    var mydoughnutChart = new Chart(ctx).Doughnut(doughnutData, doughnutOptions);



    var ctx = document.getElementById("polar-chart").getContext("2d");
    window.myPolarArea = new Chart(ctx).PolarArea(polarData, {
        responsive:true
    });

    new Chart(document.getElementById("lineChart").getContext("2d")).Line(lineChartData)</script>
</body>
</html>







